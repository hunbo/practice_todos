세션(session): 데이터베이스와 애플리케이션 간의 연결을 의미함.
	- 데이터베이스와의 연결 관리: 세션은 애플리케이션이 데이터베이스와 상호작용할 수 있도록 하는 연결고리.
	데이터를 조회하거나 수정할 때 세션을 통해 데이터를 가져오고, 그 데이터를 데이터베이스에 반영

	-트랜잭션 관리: 예를 들어 여러 작업을 한 번에 실행하고 마지막 commit()을 호출하여 모두 완료된 것으로 처리

	-변경사항 추적: 만약 데이터를 수정하거나 삭제하면, 이를 세션이 기록하고, 트랜잭션이 끝날 때 commit()을 통해 이 변경 사항을 데이터베이스에 반영







models.py에서는 데이터베이스 테이블을 나타내는 ORM 모델을 정의합니다. 여기서 사용하는 SQLAlchemy는 파이썬 클래스와 데이터베이스 테이블을 매핑해주는 라이브러리

@app.get("/delete/{todo_id}")는 FastAPI의 데코레이터로, 특정 URL에 대해 HTTP GET 요청을 처리하도록 지정합니다. 
여기서 "/delete/{todo_id}"는 클라이언트가 /delete/1 같은 URL로 요청을 보내면, 이 엔드포인트가 실행된다는 것을 의미합니다.

	- todo_id는 **경로 매개변수(Path Parameter)**로, 삭제하고자 하는 특정 Todo 항목의 ID입니다. 
 	예를 들어, /delete/3 같은 요청이 들어오면, todo_id 값은 3이 됩니다.

	- 이 값은 데이터베이스에서 특정 항목을 찾을 때 사용함.

GET 요청: 이 함수는 클라이언트로부터 GET 요청을 받을 때 실행됩니다. 
주로 서버에서 데이터를 조회하거나, 특정 작업을 처리한 후에 리디렉션할 때 GET 요청을 사용합니다.


async def: 이 함수는 비동기적으로 실행됩니다. FastAPI는 비동기(Asynchronous) 함수로 작성된 코드에서 I/O 작업(예: 데이터베이스 접근, HTTP 요청)을 효율적으로 처리할 수 있습니다. 
비동기 함수는 처리 속도를 높이고 성능을 개선하는데 도움을 줍니다.

request: Request: FastAPI에서 제공하는 Request 객체는 요청에 대한 정보를 담고 있습니다. 예를 들어, 요청 헤더, 요청 URL 등을 포함할 수 있습니다.
이 코드에서는 request 객체가 사용되지 않지만, 다른 컨텍스트에서 유용할 수 있습니다.

todo_id: int: 이 매개변수는 URL 경로에서 전달받은 ID입니다. 
예를 들어 /delete/3이라는 요청이 들어왔을 때, todo_id는 3으로 설정됩니다. 
이는 데이터베이스에서 특정 Todo 항목을 삭제할 때 사용됩니다.


db:Session = Depends(get_db): FastAPI의 존성 주입. Depends(get_db)는 데이터베이스 세션을 자동으로 주입하여 함수에서 사용할 수 있도록 해줌.
- get_db() 함수는 데이터베이스와 연결된 세션을 반환하며, 이 세션을 통해 데이터베이스 작업(쿼리, 추가, 삭제 등)을 할 수 있습니다.
- db는 이 세션을 가리키며, 이후 데이터베이스에 접근할 때 사용됩니다.
- 의존성 주입은 '코드의 간결함' 을 위해,,

db.query(models.Todo): Todo 테이블에서 데이터를 가져오겠다는 뜻입니다. 
models.Todo는 models.py에서 정의된 데이터베이스 테이블과 매핑되는 클래스입니다. 
이 코드는 Todo 테이블에서 항목을 검색하는 쿼리를 실행하겠다는 의미입니다.


filter(models.Todo.id == todo_id): Todo 테이블에서 ID가 todo_id인 항목을 필터링합니다.
즉, 경로 매개변수로 전달된 todo_id에 해당하는 할 일을 찾습니다. 
예를 들어 todo_id = 3이면, id가 3인 Todo 항목을 검색합니다.





models.py: Todo라는 클래스를 정의하여 todos 테이블과 매핑합니다. 이 클래스는 Base를 상속받아 SQLAlchemy의 ORM 모델로 기능합니다.

database.py: 데이터베이스 연결과 세션을 설정하고, 이 세션을 통해 데이터베이스와 통신할 수 있도록 합니다.

main.py: API 요청을 처리하는 역할을 하며, models.py와 database.py에서 정의된 모델과 세션을 가져와 사용합니다.

예를 들어, main.py에서 새로운 작업을 추가할 때, Todo 모델을 사용해 새로운 객체를 만들고, 이를 db.add()로 세션에 추가한 뒤 db.commit()으로 데이터베이스에 저장합니다.
또한, 데이터베이스에서 작업을 가져오거나 삭제할 때도 db.query() 등을 통해 세션을 이용해 데이터를 처리합니다.
결론적으로, models.py, database.py, main.py는 각각 데이터베이스와 상호작용하는 데 필요한 모델 정의, 데이터베이스 연결, 그리고 API 요청 처리로 분리되어 있으며, 각 파일은 FastAPI를 통해 서로 연결되고 데이터를 주고받습니다.